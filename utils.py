from openai import OpenAI
import random
import requests
import json
import os

def process_tool_calls(messages, tool_calls):
    """
    This function takes a list of messages and a list of tool calls, processes each tool call
    by calling the appropriate function with the specified arguments, and appends the results
    to the messages list in the required format. Finally, it generates a response using the OpenAI
    API with the updated messages list.
    
    Parameters:
    - messages (list): A list of messages to which the tool call results will be appended.
    - tool_calls (list): A list of tool calls to be processed, each containing an id, function name, 
                         and function arguments.
                         
    Returns:
    - response: The response generated by the OpenAI API after processing the tool calls.
    """
    client = OpenAI()
    for tool in tool_calls:
        tool_call_id = tool.id
        tool_function_name = tool.function.name
        tool_arguments = eval(tool.function.arguments)
        
        if tool_function_name == 'web_search':
            query = tool_arguments['query']
            results = web_search(query)
        elif tool_function_name == 'get_weather':
            location = tool_arguments['location']
            results = get_weather(location)
        elif tool_function_name == 'create_video_json':
            output_format = tool_arguments['output_format']
            duration = tool_arguments['duration']
            width = tool_arguments['width']
            height = tool_arguments['height']
            elements = tool_arguments['elements']
            results = create_video_json(output_format,duration,width,height,elements) 
            return results           
        else:
            continue

        messages.append({
            "role": "tool", 
            "tool_call_id": tool_call_id, 
            "name": tool_function_name, 
            "content": results
        })   
    response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
    ) 
    return response


def web_search(query):
    """
    Use this function to perform any web search query.
    
    Parameters:
        query (str): Any query he wants to know about from internet or web search
    
    Returns:
        str: about information regarding google search intended.
    """
    api_url = "https://api.avesapi.com/search"
    api_key = os.getenv('SERPER_API_KEY')
    params = {
        "type":"web",
        "apikey": api_key,
        "num": 2,
        "query": query
    }
    response = requests.get(api_url, params=params)
    if response.status_code == 200:
        data = response.json()
        response_string = json.dumps(data, indent=4)
    else:
        response_string=f"Request failed with status code {response.status_code}"
    return response_string

def get_weather(location):
    """
    Get the current weather for a specific location.
    
    Parameters:
        location (str): The city and state, e.g., San Francisco, CA.
    
    Returns:
        str: reagrding the weather of that location.
    """
    api_key = 'f5896694eed3459c874114716240507'
    api_key=os.getenv('WEATHER_API_KEY')
    endpoint = 'http://api.weatherapi.com/v1/current.json'
    params = {
        'key': api_key,
        'q': location,
        'aqi': 'no'    
    }

    response = requests.get(endpoint, params=params)
    if response.status_code == 200:
        data = response.json()
        location_data = data['location']
        current_data = data['current']
        weather_info = (
                f"Location: {location_data['name']}, {location_data['region']}, {location_data['country']}\n"
                f"Local Time: {location_data['localtime']}\n"
                f"Temperature: {current_data['temp_c']}°C ({current_data['temp_f']}°F)\n"
                f"Condition: {current_data['condition']['text']}\n"
                f"Wind: {current_data['wind_mph']} mph ({current_data['wind_kph']} kph), "
                f"Direction: {current_data['wind_dir']} ({current_data['wind_degree']}°)\n"
                f"Pressure: {current_data['pressure_mb']} mb ({current_data['pressure_in']} in)\n"
                f"Precipitation: {current_data['precip_mm']} mm ({current_data['precip_in']} in)\n"
                f"Humidity: {current_data['humidity']}%\n"
                f"Cloud Cover: {current_data['cloud']}%\n"
                f"Feels Like: {current_data['feelslike_c']}°C ({current_data['feelslike_f']}°F)\n"
                f"Dew Point: {current_data['dewpoint_c']}°C ({current_data['dewpoint_f']}°F)\n"
                f"Visibility: {current_data['vis_km']} km ({current_data['vis_miles']} miles)\n"
                f"UV Index: {current_data['uv']}\n"
                f"Gust: {current_data['gust_mph']} mph ({current_data['gust_kph']} kph)"
            )
    
        return weather_info
    else:
        # Return the error message
        return f"Error: {response.status_code}, {response.json()}"
def create_video_json(output_format, duration, width, height, elements):
    """
    Create a JSON string representing the video with specified properties.

    Args:
        output_format (str): The format of the output video (e.g., 'mp4').
        duration (str): The duration of the video (e.g., '3 s').
        width (int): The width of the video (e.g., 1920).
        height (int): The height of the video (e.g., 1080).
        elements (list): A list of elements to include in the video. Each element is a dictionary with the following keys:
            - type (str): The type of the element (e.g., 'text').
            - track (int): The track number of the element (e.g., 1).
            - time (str): The start time of the element (e.g., '0 s').
            - duration (str): The duration of the element (e.g., '1 s').
            - fill_color (str): The fill color of the element (e.g., '#ffffff').
            - text (str): The text content of the element.
            - font_family (str): The font family of the text (e.g., 'Open Sans').

    Returns:
        str: A JSON string representing the video with the specified properties.

    Example:
        elements = [
            {
                "type": "text",
                "track": 1,
                "time": "0 s",
                "duration": "1 s",
                "fill_color": "#ffffff",
                "text": "Hello, World!",
                "font_family": "Open Sans"
            },
            {
                "type": "text",
                "track": 2,
                "time": "1 s",
                "duration": "2 s",
                "fill_color": "#000000",
                "text": "This is a sample video",
                "font_family": "Arial"
            }
        ]

    """
    video_data = {
        "output_format": output_format,
        "duration": duration,
        "width": width,
        "height": height,
        "elements": elements
    }
    
    return json.dumps(video_data, indent=4)